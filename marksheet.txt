-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [...] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited
by the assignment description of course).  Let us know what third-party
source code or resources you used (if any) so it's clear what's your work
and what isn't:

Extended Euclidean algorithm implementation adapted from the python implementation from
https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Extended_Euclidean_algorithm

Montgomery Multiplication implementation based on pseudocode from
https://alicebob.cryptoland.net/understanding-the-montgomery-reduction-algorithm/

Sliding window exponentiation implementation based on pseudocode from
https://en.wikipedia.org/wiki/Exponentiation_by_squaring#Sliding_window_method

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as the efficiency, robustness,
generality, realism, or style of a solution.

[X] Stage 1 : implement RSA     encryption                           ( 10%)

[X] Stage 2 : implement RSA     decryption                           ( 10%)

[X] Stage 3 : implement ElGamal encryption                           ( 10%)

[X] Stage 4 : implement ElGamal decryption                           ( 10%)

    Extra   : implement (and integrate) major optimisations
[X]           - has a reasoned approach to pseudo-random generation  ( 10%)
[X]           - uses Chinese Remainder Theorem (CRT)                 ( 10%)
[X]           - uses non-binary (i.e., "windowed") exponentiation    ( 15%)
[X]           - uses Montgomery multiplication wherever appropriate  ( 25%)

                                                                     ------
                                                                     (100%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

Hopefully, the Makefile should work, but if not, then compile all *.cpp files into a single binary using a c++98 compiler

-------------------------------------------------------------------------------
